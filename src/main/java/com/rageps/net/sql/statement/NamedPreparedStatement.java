package com.rageps.net.sql.statement;

import com.google.gson.Gson;
import com.rageps.util.json.GsonUtils;
import com.rageps.world.entity.actor.player.persist.property.PersistancePropertyType;

import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class NamedPreparedStatement extends DelegatingPreparedStatement {
	private final List<String> orderedParameters;


	private NamedPreparedStatement(PreparedStatement delegate, List<String> orderedParameters) {
		super(delegate);
		this.orderedParameters = orderedParameters;
	}

	public static ParseResult parse(String query) {
		List<String> orderedParameters = new ArrayList<>();
		int length = query.length();
		StringBuilder parsedQuery = new StringBuilder(length);
		boolean inSingleQuote = false;
		boolean inDoubleQuote = false;
		boolean inSingleLineComment = false;
		boolean inMultiLineComment = false;

		for (int i = 0; i < length; i++) {
			char c = query.charAt(i);
			if (inSingleQuote) {
				if (c == '\'') {
					inSingleQuote = false;
				}
			} else if (inDoubleQuote) {
				if (c == '"') {
					inDoubleQuote = false;
				}
			} else if (inMultiLineComment) {
				if (c == '*' && query.charAt(i + 1) == '/') {
					inMultiLineComment = false;
				}
			} else if (inSingleLineComment) {
				if (c == '\n') {
					inSingleLineComment = false;
				}
			} else {
				if (c == '\'') {
					inSingleQuote = true;
				} else if (c == '"') {
					inDoubleQuote = true;
				} else if (c == '/' && query.charAt(i + 1) == '*') {
					inMultiLineComment = true;
				} else if (c == '-' && query.charAt(i + 1) == '-') {
					inSingleLineComment = true;
				} else if (c == ':' && i + 1 < length && Character.isJavaIdentifierStart(query.charAt(i + 1))) {
					int j = i + 2;
					while (j < length && Character.isJavaIdentifierPart(query.charAt(j))) {
						j++;
					}
					String name = query.substring(i + 1, j);
					orderedParameters.add(name);
					c = '?'; // replace the parameter with a question mark
					i += name.length(); // skip past the end if the parameter
				}
			}
			parsedQuery.append(c);
		}
		return new ParseResult(parsedQuery.toString(), orderedParameters);
	}

	public static NamedPreparedStatement create(Connection conn, String sql) throws SQLException {
		ParseResult parseResult = parse(sql);
		return new NamedPreparedStatement(conn.prepareStatement(parseResult.getSql()), parseResult.getOrderedParameters());
	}

	public static NamedPreparedStatement create(Connection conn, String sql, int autoGeneratedKeys) throws SQLException {
		ParseResult parseResult = parse(sql);
		return new NamedPreparedStatement(conn.prepareStatement(parseResult.getSql(), autoGeneratedKeys), parseResult.getOrderedParameters());
	}

	public static NamedPreparedStatement create(Connection conn, String sql, int[] columnIndexes) throws SQLException {
		ParseResult parseResult = parse(sql);
		return new NamedPreparedStatement(conn.prepareStatement(parseResult.getSql(), columnIndexes), parseResult.getOrderedParameters());
	}

	public static NamedPreparedStatement create(Connection conn, String sql, String[] columnNames) throws SQLException {
		ParseResult parseResult = parse(sql);
		return new NamedPreparedStatement(conn.prepareStatement(parseResult.getSql(), columnNames), parseResult.getOrderedParameters());
	}

	public static NamedPreparedStatement create(Connection conn, String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		ParseResult parseResult = parse(sql);
		return new NamedPreparedStatement(conn.prepareStatement(parseResult.getSql(), resultSetType, resultSetConcurrency), parseResult.getOrderedParameters());
	}

	public static NamedPreparedStatement create(Connection conn, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		ParseResult parseResult = parse(sql);
		return new NamedPreparedStatement(conn.prepareStatement(parseResult.getSql(), resultSetType, resultSetConcurrency, resultSetHoldability), parseResult.getOrderedParameters());
	}

	public boolean hasNamedParameters() {
		return !orderedParameters.isEmpty();
	}

	private Collection<Integer> getParameterIndexes(String parameter) {
		List<Integer> indexes = new ArrayList<>();
		for (int i = 0; i < orderedParameters.size(); i++) {
			if (orderedParameters.get(i).equals(parameter)) {
				indexes.add(i + 1);
			}
		}
		if (indexes.isEmpty()) {
			throw new IllegalArgumentException(String.format("SQL statement doesn't contain the parameter '%s'", parameter));
		}
		return indexes;
	}

	public void setNull(String parameter, int sqlType) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setNull(i, sqlType);
		}
	}

	public void setBoolean(String parameter, boolean x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setBoolean(i, x);
		}
	}

	public void setByte(String parameter, byte x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setByte(i, x);
		}
	}

	public void setShort(String parameter, short x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setShort(i, x);
		}
	}

	public void setInt(String parameter, int x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setInt(i, x);
		}
	}

	public void setLong(String parameter, long x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setLong(i, x);
		}
	}

	public void setFloat(String parameter, float x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setFloat(i, x);
		}
	}

	public void setDouble(String parameter, float x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setDouble(i, x);
		}
	}

	public void setBigDecimal(String parameter, BigDecimal x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setBigDecimal(i, x);
		}
	}

	public void setString(String parameter, String x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setString(i, x);
		}
	}

	public void setBytes(String parameter, byte[] x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setBytes(i, x);
		}
	}

	public void setDate(String parameter, Date x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setDate(i, x);
		}
	}

	public void setTime(String parameter, Time x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setTime(i, x);
		}
	}

	public void setTimestamp(String parameter, Timestamp x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setTimestamp(i, x);
		}
	}

	public void setAsciiStream(String parameter, InputStream x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setAsciiStream(i, x);
		}
	}

	@Deprecated
	public void setUnicodeStream(String parameter, InputStream x, int length) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setUnicodeStream(i, x, length);
		}
	}

	public void setBinaryStream(String parameter, InputStream x, int length) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setBinaryStream(i, x, length);
		}
	}

	public void setObject(String parameter, Object x, int targetSqlType, int scale) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setObject(i, x, targetSqlType, scale);
		}
	}

	public void setObject(String parameter, Object x, int targetSqlType) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setObject(i, x, targetSqlType);
		}
	}

	public void setObject(String parameter, Object x) throws SQLException {
		for (Integer i : getParameterIndexes(parameter)) {
			getDelegate().setObject(i, x);
		}
	}

	private final Gson GSON = GsonUtils.JSON_ALLOW_NULL;


	public void setObject(String parameter, Object object, PersistancePropertyType type) throws SQLException {
		switch (type) {
			case ENUM:
				setString(parameter, ((Enum) object).name());
				break;
			case JSON:
				setString(parameter, GSON.toJson(object));
				break;
			case INT:
				setInt(parameter, (Integer) object);
				break;
			case LONG:
				setLong(parameter, (Long) object);
				break;
			case BOOLEAN:
				setBoolean(parameter, (Boolean) object);
				break;
			case STRING:
				setString(parameter, (String) object);
				break;
			default:
				setObject(parameter, object);
				break;
		}
	}


	private static final class ParseResult {
		private String sql;

		private List<String> orderedParameters;

		public ParseResult(String sql, List<String> orderedParameters) {
			this.sql = sql;
			this.orderedParameters = orderedParameters;
		}

		public String getSql() {
			return sql;
		}

		public List<String> getOrderedParameters() {
			return orderedParameters;
		}
	}

}
